services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    networks:
      - broker-kafka
    environment:
      ZOOKEEPER_CLIENT_PORT: 2121
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:latest
    networks:
      - broker-kafka
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2121
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29029, PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  kafdrop:
    image: obsidiandynamics/kafdrop:latest
    networks:
      - broker-kafka
    depends_on:
      - kafka
    ports:
      - 9000:9000
    environment:
      KAFKA_BROKERCONNECT: kafka:29029

  mongodb:
    image: mongo:latest
    command: [ --auth ]
    container_name: userdb
    environment:
      MONGO_INITDB_ROOT_USERNAME: userAdmin
      MONGO_INITDB_ROOT_PASSWORD: userPassword
    ports:
      - 27017:27017
    volumes:
      - mongo-data:/user/db

  redis:
    container_name: redis
    hostname: redis
    image: redis
    ports:
      - 6379:6379

  redis-commader:
    container_name: redis-commander
    hostname: redis-commander
    image: rediscommander/redis-commander:latest
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - 8182:8182

  springboot-app:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      SPRING_DATA_MONGODB_URI: mongodb://localhost:27017/userdb
    depends_on:
      - mongodb
    ports:
      - 8181:8181

volumes:
  mongo-data:

networks:
  broker-kafka:
    driver: bridge